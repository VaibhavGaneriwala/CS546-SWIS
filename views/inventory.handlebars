<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Inventory Dashboard</title>
  <link rel="stylesheet" href="/css/inventory.css">
</head>
<body>
  <div class="container">
    <aside class="sidebar">
      <h2 class="logo">SWIS</h2>
      <nav>
        <a href="/dashboard">Dashboard</a>
        <a class="active" href="/inventory">Inventory</a>
        <a href="/reports">Reports</a>
        <a href="/settings">Settings</a>
        <a href="/logout">Log Out</a>
      </nav>
    </aside>

    <main class="main-content">
      <header class="top-bar">
        <input type="text" placeholder="Search product">
        <div class="profile"></div>
      </header>

      <section class="overview">
        <div class="card">
          <p>Categories</p>
          <h3>{{categoryCount}}</h3>
          <small>Last 7 days</small>
        </div>
        <div class="card">
          <p>Total Products</p>
          <h3>{{products.length}}</h3>
          <small>Total Value: ${{totalInventoryValue}}</small>
        </div>
        <div class="card">
          <p>Price Overview</p>
          <h3>${{totalInventoryValue}}</h3>
          <small>Total Price</small>
        </div>
        <div class="card">
          <p>Low Stocks</p>
          <h3>{{lowStockCount}}</h3>
          <small>{{noStockCount}} Not in stock</small>
        </div>
      </section>

      <section class="products">
        <div class="product-header">
          <h2>Products</h2>
          <div class="buttons">
            <button class="add" onclick="openAddProductModal()">Add Product</button>
            <button class="download" onclick="downloadCSV()">Download all</button>
          </div>
        </div>
        <table>
          <thead>
            <tr>
              <th>Products</th>
              <th>Buying Price</th>
              <th>Quantity</th>
              <th>Threshold Value</th>
              <th>Expiry Date</th>
              <th>Availability</th>
              <th>Formatted Price</th>
            </tr>
          </thead>
          <tbody>
            {{#each products}}
              <tr>
                <td>{{productName}}</td>
                <td>${{unitPrice}}</td>
                <td>{{quantity}} units</td>
                <td>{{minThreshold}} units</td>
                <td>{{restockSuggestion.nextRestockDate}}</td>
                <td class="{{stockStatus}}">
                  {{#if (eq stockStatus 'out-stock')}}
                    Out of stock
                  {{else if (eq stockStatus 'low-stock')}}
                    Low stock
                  {{else}}
                    In stock
                  {{/if}}
                </td>
                <td>${{formattedPrice}}</td>
              </tr>
            {{/each}}
          </tbody>
        </table>
        <div class="pagination">
          <button>Previous</button>
          <span>Page 1 of 10</span>
          <button>Next</button>
        </div>
      </section>
    </main>
  </div>

  <!-- Add Product Modal -->
  <div id="addProductModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeAddProductModal()">&times;</span>
      <h2>Add New Product</h2>
      <form id="addProductForm" onsubmit="handleAddProduct(event)">
        <div class="form-group">
          <label for="productName">Product Name</label>
          <input type="text" id="productName" name="productName" required>
          <div class="error-message" id="productNameError"></div>
        </div>
        <div class="form-group">
          <label for="categoryName">Category</label>
          <input type="text" id="categoryName" name="categoryName" required>
          <div class="error-message" id="categoryNameError"></div>
        </div>
        <div class="form-group">
          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity" min="0" required>
          <div class="error-message" id="quantityError"></div>
        </div>
        <div class="form-group">
          <label for="minThreshold">Minimum Threshold</label>
          <input type="number" id="minThreshold" name="minThreshold" min="0" required>
          <div class="error-message" id="minThresholdError"></div>
        </div>
        <div class="form-group">
          <label for="unitPrice">Unit Price ($)</label>
          <input type="number" id="unitPrice" name="unitPrice" min="0" step="0.01" required>
          <div class="error-message" id="unitPriceError"></div>
        </div>
        <div class="form-group">
          <label for="nextRestockDate">Next Restock Date</label>
          <input type="date" id="nextRestockDate" name="nextRestockDate" required>
          <div class="error-message" id="nextRestockDateError"></div>
        </div>
        <div class="form-group">
          <label for="recommendedQty">Recommended Restock Quantity</label>
          <input type="number" id="recommendedQty" name="recommendedQty" min="0" required>
          <div class="error-message" id="recommendedQtyError"></div>
        </div>
        <button type="submit" class="submit-btn">Add Product</button>
      </form>
    </div>
  </div>

  <script>
    function downloadCSV() {
      window.location.href = '/inventory/export';
    }

    function openAddProductModal() {
      document.getElementById('addProductModal').style.display = 'block';
    }

    function closeAddProductModal() {
      document.getElementById('addProductModal').style.display = 'none';
    }

    async function handleAddProduct(event) {
      event.preventDefault();
      
      // Clear previous error messages
      document.querySelectorAll('.error-message').forEach(el => el.style.display = 'none');
      
      const formData = {
        productName: document.getElementById('productName').value,
        categoryName: document.getElementById('categoryName').value,
        quantity: parseInt(document.getElementById('quantity').value),
        minThreshold: parseInt(document.getElementById('minThreshold').value),
        unitPrice: parseFloat(document.getElementById('unitPrice').value),
        restockSuggestion: {
          nextRestockDate: document.getElementById('nextRestockDate').value,
          recommendedQty: parseInt(document.getElementById('recommendedQty').value)
        }
      };

      try {
        const response = await fetch('/inventory', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        if (response.ok) {
          // Close modal and refresh page
          closeAddProductModal();
          window.location.reload();
        } else {
          const error = await response.json();
          // Display error message
          const errorElement = document.getElementById('productNameError');
          errorElement.textContent = error.message || 'Failed to add product';
          errorElement.style.display = 'block';
        }
      } catch (error) {
        console.error('Error:', error);
        const errorElement = document.getElementById('productNameError');
        errorElement.textContent = 'An error occurred while adding the product';
        errorElement.style.display = 'block';
      }
    }

    // Close modal when clicking outside
    window.onclick = function(event) {
      const modal = document.getElementById('addProductModal');
      if (event.target === modal) {
        closeAddProductModal();
      }
    }
  </script>
</body>
</html>
